<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Basic Company Template for Bootstrap 3</title>

    <!-- Bootstrap core CSS -->
    <link href="/styles/bootstrap.css" rel="stylesheet">
    <!--[if lt IE 9]>
      <script src="//html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <link rel="stylesheet" href="/font-awesome/css/font-awesome.min.css">

    <!-- Custom CSS for the 'Heroic Features' Template -->
<!--    <link href="css/heroic-features.css" rel="stylesheet"> -->
<script>
    var validation = false;

</script>
    <style>
        .LV_validation_message{
            font-weight:bold;
            margin:0 0 0 5px;
        }

        .LV_valid {
            color:#00CC00;
        }
	
        .LV_invalid {
            color:#CC0000;
        }
    
        .LV_valid_field,
        input.LV_valid_field:hover, 
        input.LV_valid_field:active,
        textarea.LV_valid_field:hover, 
        textarea.LV_valid_field:active {
            border: 1px solid #00CC00;
        }
    
        .LV_invalid_field, 
        input.LV_invalid_field:hover, 
        input.LV_invalid_field:active,
        textarea.LV_invalid_field:hover, 
        textarea.LV_invalid_field:active {
            border: 1px solid #CC0000;
        }
    </style>

</head>

<body>

    <nav class="navbar navbar-fixed-top navbar-inverse" role="navigation">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="/">Start Bootstrap</a>
            </div>

            <!-- Collect the nav links, forms, and other content for toggling -->
            <div class="collapse navbar-collapse navbar-ex1-collapse">
                <ul class="nav navbar-nav">
                    <li><a href="/about">About</a>
                    </li>
                    <li><a href="/contact">Contact</a>
                    </li>
                    <li><a href="/signup">Signup</a>
                    </li>
                </ul>
                  <ul class="nav navbar-nav navbar-right">
                    <li>
                      <a href="/login/">
                        <i class="fa fa-user">
                        </i>
                        Sign In
                      </a>
                    </li>
                  </ul>
            </div>
            <!-- /.navbar-collapse -->
        </div>
        <!-- /.container -->
    </nav>


<%- body %>


        <hr>

        <footer>
            <div class="row">
                <div class="col-lg-12">
                    <p>Copyright &copy; Company 2013</p>
                </div>
            </div>
        </footer>

    </div>
    <!-- /.container -->

    <!-- JavaScript -->
    <script src="/js/zepto.js"></script>
    <script>
        if (!window.jQuery) {
            Zepto.browser = { webkit: true };
            var $ = window.jQuery = Zepto;
        }
    </script>
    <script src="/js/bootstrap.js"></script>
<!--
    <script src="/js/socket.io.js"></script>
    <script src="/js/sails.io.js"></script>
    <script src="/js/connection.example.js"></script>
-->
    <script src="/js/livevalidation_standalone.compressed.js"></script>

    <script type="text/javascript">
        $(document).ready(function () {
            var onInvalid = function (options) {
                this.insertMessage(this.createMessageSpan());
                this.addFieldClass();
//                console.log("onInvalid", this);
            }
            var onValid = function (options) {
                var span = document.createElement('span');
                span.setAttribute("class", "glyphicon glyphicon-ok form-control-feedback")
                this.insertMessage(span);
                this.addFieldClass();
                this.element.parentNode.className = "form-group has-sccess has-feedback";
//                console.log("onValid", options);
            }

            /*
                validMessage (optional) - {String} - message to be used upon successful validation (DEFAULT: “Thankyou!”)
                onValid (optional) - {Function} - function to execute when field passes validation (DEFAULT: function(){ this.insertMessage( this.createMessageSpan() ); this.addFieldClass(); } )
                onInvalid (optional) - {Function} - function to execute when field fails validation (DEFAULT: function(){ this.insertMessage( this.createMessageSpan() ); this.addFieldClass(); })
                insertAfterWhatNode (optional) - {mixed} - reference or id of node to have the message inserted after (DEFAULT: the field that is being validated)
                onlyOnBlur (optional) - {Boolean} - whether you want it to validate as you type or only on blur (DEFAULT: false)
                wait (optional) - {Integer} - the time you want it to pause from the last keystroke before it validates (milliseconds) (DEFAULT: 0)
                onlyOnSubmit (optional) - {Boolean} - if it is part of a form, whether you want it to validate it only when the form is submitted (DEFAULT: false)
            */
            // username validation
            if (validation)
            {

            try {
                var username = new LiveValidation('username', { /*validMessage: "", */onInvalid: onInvalid, onValid: onValid })
                    .add( Validate.Presence )
                    .add(Validate.Format, { pattern: /^[a-zA-Z0-9_-]+$/i })
                    .add(Validate.Length, { minimum: 4 })
            }
            catch (e) { }
            try {
                var email = new LiveValidation('email', { /*validMessage: "", */onInvalid: onInvalid, onValid: onValid })
                    .add(Validate.Presence)
                    .add(Validate.Email);
            }
            catch (e) { }
            try {
                var password = new LiveValidation('password', { /*validMessage: "", */onInvalid: onInvalid, onValid: onValid })
                    .add(Validate.Presence)
                    .add(Validate.Format, { pattern: /^[a-zA-Z0-9 -/:-@\[-\`\{-\~]+$/i })
                    .add(Validate.Length, { minimum: 6 })
            }
            catch (e) { }
            try {
                var confirm = new LiveValidation('confirm', { /*validMessage: "", */onInvalid: onInvalid, onValid: onValid })
                    .add(Validate.Presence)
                    .add(Validate.Confirmation, { match: 'password' });
            }
            catch (e) { }
/*
            try{
                var password = new LiveValidation('hoge');
            }
            catch(e){}
*/
            // Generate a simple captcha

            }

        });
    </script>



</body>

</html>